from typing import Any, Dict, List, Optional

from django.core.files.storage import FileSystemStorage
from django.core.management.base import BaseCommand, CommandParser

class Command(BaseCommand):
    stderr: django.core.management.base.OutputWrapper
    stdout: django.core.management.base.OutputWrapper
    help: str = ...
    requires_system_checks: bool = ...
    copied_files: Any = ...
    symlinked_files: Any = ...
    unmodified_files: Any = ...
    post_processed_files: Any = ...
    storage: Any = ...
    style: django.core.management.color.Style = ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def local(self) -> bool: ...
    def add_arguments(self, parser: CommandParser) -> None: ...
    interactive: Any = ...
    verbosity: Any = ...
    symlink: Any = ...
    clear: Any = ...
    dry_run: Any = ...
    ignore_patterns: Any = ...
    post_process: Any = ...
    def set_options(self, **options: Any) -> None: ...
    def collect(self) -> Dict[str, List[str]]: ...
    def handle(self, **options: Any) -> Optional[str]: ...
    def log(self, msg: str, level: int = ...) -> None: ...
    def is_local_storage(self) -> bool: ...
    def clear_dir(self, path: str) -> None: ...
    def delete_file(self, path: str, prefixed_path: str, source_storage: FileSystemStorage) -> bool: ...
    def link_file(self, path: str, prefixed_path: str, source_storage: FileSystemStorage) -> None: ...
    def copy_file(self, path: str, prefixed_path: str, source_storage: FileSystemStorage) -> None: ...
